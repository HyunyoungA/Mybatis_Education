<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">
	<!-- loginMember=SELECT * MEMER WHERE USER_ID=? AND USER_PWD=?
		id : 쿼리문의 고유 아이디(유일한 구분자)
		select태그 안에 쿼리를 집어넣는다. 마이바티스에서는 엔터쳐도 상관없다.
	 	mapper가 여러개일 수 있다. 어떤 mapper에 들어가있는 쿼리인지 중요하다!!namespace="memberMapper"이름설정
	 	parameterType = 받아온데이터의 타입이 어떤것이냐, 풀경로를 지정해준다.
	 	parameterType : 쿼리에 전달될 데이터의 타입
	 	member에 대한 필드명을 넣는다 #{}안에, mapper에서는 #을 넣는다 $를넣으면 에러가 난다
	 	리절트셋 내가 원하는 형태로 변환을 시켜준다. 그자체로 못써서.
	 	resultType은 설렉트해와서 어떤 타입으로 바꿀지 풀경로를 사용하여 알아서 맵핑된다.
		파라미터타입은 내가쿼리에 전달될 데이터의 타입을 넣고, 리절트타입은 셀렉트해와 쿼리에 실행 후 나온 조회된결과가 옮겨담을 객체를 지정
		resultType : 쿼리 실행 후 조회된 결과(ResultSet)가 사용되게끔 담는 객체
	 -->
<!-- 	<select id="loginMember" parameterType="member.model.vo.Member" resultType="member.model.vo.Member"> -->
	<!-- status가 Y인 것만 로그인 가능하다. -->
	<select id="loginMember" parameterType="member.model.vo.Member" resultMap="memberResultSet">
		SELECT *
		FROM MEMBER
		WHERE USER_ID = #{userId} AND USER_PWD = #{userPwd} and m_status='Y'
	</select>
	
	<!-- 내가 받아온 리절트타입은 자동맵핑 리절트맵은 원하는 객체타입으로 맵핑시켜준다(손수맵핑(필드명과 컬럼명이 달라서)) -->
	<!-- mtbatis-config에서 별칭을 만들어줘서 type="별칭명"사용가능하다 -->
	<resultMap type="Member" id="memberResultSet">
		<!-- id : 기본키pk column: DB컬럼명 property:맵핑시킬 필드명-->
		<id column="USER_ID" property="userId"/>
		<!-- result: 일반컬럼 -->
		<result column="USER_PWD" property="userPwd"/>
		<result column="USER_NAME" property="userName"/>
		<result column="NICKNAME" property="nickName"/>
		<result column="EMAIL" property="email"/>
		<result column="BIRTHDAY" property="birthDay"/>
		<result column="GENDER" property="gender"/>
		<result column="PHONE" property="phone"/>
		<result column="ADDRESS" property="address"/>
		<result column="ENROLL_DATE" property="enrollDate"/>
		<result column="UPDATE_DATE" property="updateDate"/>
		<result column="M_STATUS" property="mStatus"/>
	</resultMap>
	
	<!-- 회원가입/ 리절트타입, 리절트셋은 select꺼다 => insert는 쓰지않는다.-->
	<insert id="insertMember" parameterType="Member">
		INSERT INTO MEMBER
		VALUES (#{userId}, #{userPwd}, #{userName}, #{nickName}, #{email}, #{birthDay}, #{gender}, #{phone}, #{address}, SYSDATE, SYSDATE, DEFAULT)
	</insert>
	<!-- 내정보수정 -->
	<update id="updateMember" parameterType="Member">
		UPDATE MEMBER
		SET  USER_NAME = #{userName}, NICKNAME = #{nickName}, EMAIL = #{email}, BIRTHDAY = #{birthDay}, GENDER = #{gender}, PHONE = #{phone}, ADDRESS = #{address}
		WHERE USER_ID = #{userId}
	</update>
	<!-- 비밀번호 수정, 마이바티스 교안 17페이지 참고 파라미터타입 벨류를 뽑아오려면 키값이 필요하다.-->
	<update id="updatePwd" parameterType="hashmap">
		UPDATE MEMBER
		SET USER_PWD = #{newPwd}
		WHERE USER_ID = #{id} AND USER_PWD = #{oldPwd}
	</update>
	<!-- 회원탈퇴 -->
	<update id="deleteMember" parameterType="string">
		UPDATE MEMBER
		SET M_STATUS = 'N'
		WHERE USER_ID = #{userId}
	</update>
	
</mapper>